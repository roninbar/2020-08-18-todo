{"version":3,"sources":["actions/index.js","components/TodoForm.js","components/TodoList.js","reducers/index.js","App.js","utils/index.js","serviceWorker.js","index.js"],"names":["todoReplaceList","list","type","payload","todoUpdateListAsync","dispatch","a","fetch","response","status","json","sendJsonRequestAsync","expectedStatus","method","url","body","modifyListAsync","headers","JSON","stringify","fetchOptions","useStyles","makeStyles","theme","root","margin","spacing","width","connect","submit","what","when","who","todoAddAsync","useState","setWhat","Date","setWhen","classes","utils","DateFnsUtils","className","noValidate","autoComplete","onSubmit","event","preventDefault","TextField","id","label","variant","value","onChange","target","DateTimePicker","Button","color","table","minWidth","todo","updateList","setDone","done","todoDoneAsync","useEffect","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","key","style","backgroundColor","scope","textDecoration","toString","onClick","combineReducers","state","loading","error","store","preloadedState","middlewares","thunkMiddleware","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","rootReducer","configureStore","App","path","TodoForm","TodoList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4f0f1bc1.chunk.js","sourcesContent":["export const TODO_REPLACE_LIST = 'TODO_REPLACE_LIST';\r\nexport const TODO_SET_LOADING = 'TODO_SET_LOADING';\r\nexport const TODO_SET_ERROR = 'TODO_SET_ERROR';\r\n\r\nexport function todoSetLoading() {\r\n    return {\r\n        type: TODO_SET_LOADING,\r\n    };\r\n}\r\n\r\nexport function todoReplaceList(list) {\r\n    return {\r\n        type: TODO_REPLACE_LIST,\r\n        payload: list,\r\n    };\r\n}\r\n\r\nexport function todoSetError() {\r\n    return {\r\n        type: TODO_SET_ERROR,\r\n    };\r\n}\r\n\r\nexport function todoAddAsync(who, what, when) {\r\n    return sendJsonRequestAsync(201, 'post', '/todo', { who, what, when });\r\n}\r\n\r\nexport function todoDoneAsync(id, done) {\r\n    return sendJsonRequestAsync(200, 'patch', `/todo/${id}`, { done });\r\n}\r\n\r\nexport function todoDeleteAsync(id) {\r\n    return modifyListAsync(200, `/todo/${id}`, { method: 'delete' });\r\n}\r\n\r\nexport function todoUpdateListAsync() {\r\n    return async function (dispatch) {\r\n        dispatch(todoSetLoading());\r\n        const response = await fetch('/todo/all');\r\n        if (response.status === 200) {\r\n            dispatch(todoReplaceList(await response.json()));\r\n        } else {\r\n            dispatch(todoSetError());\r\n        }\r\n    };\r\n}\r\n\r\nfunction sendJsonRequestAsync(expectedStatus, method, url, body) {\r\n    return modifyListAsync(expectedStatus, url, {\r\n        method,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(body),\r\n    });\r\n}\r\n\r\nfunction modifyListAsync(expectedStatus, url, fetchOptions) {\r\n    return async function (dispatch) {\r\n        dispatch(todoSetLoading());\r\n        const response = await fetch(url, fetchOptions);\r\n        if (response.status === expectedStatus) {\r\n            dispatch(todoUpdateListAsync());\r\n        }\r\n        else {\r\n            dispatch(todoSetError());\r\n        }\r\n    };\r\n}\r\n\r\n","import DateFnsUtils from '@date-io/date-fns'; // choose your lib\r\nimport { Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { DateTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { todoAddAsync } from '../actions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n}));\r\n\r\nexport default connect(\r\n    null, // map state to props\r\n    function (dispatch) { // map dispatch to props\r\n        return {\r\n            submit: function ({ what, when }) {\r\n                return dispatch(todoAddAsync(who(), what, when));\r\n            },\r\n        };\r\n    },\r\n)(function ({ submit }) {\r\n\r\n    const [what, setWhat] = useState('');\r\n    const onChangeWhat = function ({ target: { value } }) {\r\n        return setWhat(value);\r\n    };\r\n\r\n    const [when, setWhen] = useState(new Date());\r\n\r\n    const onSubmit = function (event) {\r\n        event.preventDefault();\r\n        submit({ what, when });\r\n        setWhat('');\r\n        setWhen(new Date());\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={onSubmit}>\r\n                <div>\r\n                    <TextField id=\"filled-basic\" label=\"What\" variant=\"filled\" value={what} onChange={onChangeWhat} />\r\n                </div>\r\n                <div>\r\n                    <DateTimePicker value={when} onChange={setWhen} />\r\n                </div>\r\n                <div>\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">Add</Button>\r\n                </div>\r\n            </form>\r\n        </MuiPickersUtilsProvider>\r\n    );\r\n});\r\n\r\nfunction who() {\r\n    return 'ron';\r\n}\r\n\r\n","import { Button } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport 'fontsource-roboto';\r\nimport React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { todoDoneAsync, todoUpdateListAsync } from '../actions';\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\nexport default connect(\r\n    ({ todo }) => ({ todo }),\r\n    dispatch => ({\r\n        updateList: () => dispatch(todoUpdateListAsync()),\r\n        setDone: (id, done) => dispatch(todoDoneAsync(id, done)),\r\n    }),\r\n)(function ({ todo, updateList, setDone }) {\r\n\r\n    useEffect(function () {\r\n        updateList();\r\n    }, [updateList]);\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>What</TableCell>\r\n                        <TableCell align=\"right\">When</TableCell>\r\n                        <TableCell align=\"right\">Done</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {todo.list.map(({ id, what, when, done }) => (\r\n                        <TableRow key={id} style={{ backgroundColor: done ? 'palegreen' : 'white' }}>\r\n                            <TableCell component=\"th\" scope=\"row\" style={{ textDecoration: done ? 'line-through' : 'none' }}>\r\n                                {what}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{when.toString()}</TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <Button variant=\"contained\" onClick={() => setDone(id, !done)}>Done</Button>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n});\r\n","import { combineReducers } from 'redux';\r\nimport { TODO_REPLACE_LIST, TODO_SET_LOADING, TODO_SET_ERROR } from '../actions';\r\n\r\nfunction todo(state = { list: [], loading: true, error: false }, { type, payload }) {\r\n    switch (type) {\r\n        case TODO_SET_LOADING:\r\n            return { ...state, loading: true, error: false };\r\n        case TODO_REPLACE_LIST:\r\n            return { list: payload, loading: false, error: false };\r\n        case TODO_SET_ERROR:\r\n            return { ...state, loading: false, error: true }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({ todo });","import './App.css';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\nimport configureStore from './utils';\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <Switch>\n            <Route path=\"/signin\">\n\n            </Route>\n            <Route path=\"/signup\">\n\n            </Route>\n            <Route path=\"/\">\n              <TodoForm />\n              <TodoList />\n            </Route>\n          </Switch>\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunkMiddleware from 'redux-thunk';\r\n// import monitorReducersEnhancer from './enhancers/monitorReducers';\r\n// import loggerMiddleware from './middleware/logger';\r\nimport rootReducer from '../reducers';\r\n\r\nexport default function configureStore(preloadedState) {\r\n    const middlewares = [/* loggerMiddleware, */ thunkMiddleware,];\r\n    const middlewareEnhancer = applyMiddleware(...middlewares);\r\n\r\n    const enhancers = [middlewareEnhancer, /* monitorReducersEnhancer */];\r\n    const composedEnhancers = composeWithDevTools(...enhancers);\r\n\r\n    const store = createStore(rootReducer, /* preloadedState, */ composedEnhancers);\r\n\r\n    return store;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}