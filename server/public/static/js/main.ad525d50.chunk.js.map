{"version":3,"sources":["components/SignInForm.js","components/SignUpForm.js","actions/index.js","components/TodoForm.js","components/TodoList.js","reducers/index.js","App.js","utils/index.js","serviceWorker.js","index.js"],"names":["SignInForm","props","state","username","password","e","preventDefault","this","body","URLSearchParams","set","fetch","method","target","name","value","setState","classes","className","root","noValidate","autoComplete","onSubmit","bind","TextField","variant","type","label","onChange","onChangeField","Button","color","size","disabled","Component","withStyles","theme","margin","spacing","width","SignUpForm","password2","available","error","prevProps","prevUsername","status","todoReplaceList","list","payload","todoSetError","todoUpdateListAsync","dispatch","a","response","json","message","statusText","sendJsonRequestAsync","expectedStatus","url","modifyListAsync","headers","JSON","stringify","fetchOptions","useStyles","makeStyles","connect","submit","what","when","who","todoAddAsync","useState","setWhat","Date","setWhen","utils","DateFnsUtils","event","DateTimePicker","inputVariant","table","minWidth","todo","updateList","doneItem","id","done","todoDoneAsync","deleteItem","todoDeleteAsync","useEffect","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","key","style","backgroundColor","scope","textDecoration","toString","onClick","combineReducers","loading","_","store","preloadedState","middlewares","thunkMiddleware","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","rootReducer","configureStore","App","Typography","to","path","TodoForm","TodoList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ad525d50.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root, & .MuiButton-root': {\r\n            margin: theme.spacing(1),\r\n        },\r\n        '& .MuiTextField-root': {\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nclass SignInForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n        };\r\n    }\r\n\r\n    async onSubmit(e) {\r\n        e.preventDefault();\r\n        const { username, password } = this.state;\r\n        const body = new URLSearchParams();\r\n        body.set('username', username);\r\n        body.set('password', password);\r\n        await fetch('/login', {\r\n            method: 'post',\r\n            body,\r\n        });\r\n    }\r\n\r\n    onChangeField({ target: { name, value } }) {\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { username, password } = this.state;\r\n        return (\r\n            <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={this.onSubmit.bind(this)}>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    label=\"Username\"\r\n                    value={username}\r\n                    onChange={this.onChangeField.bind(this)} />\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    value={password}\r\n                    onChange={this.onChangeField.bind(this)}\r\n                />\r\n                <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                    disabled={!username || !password}\r\n                >Log In</Button>\r\n            </form>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default withStyles(styles)(SignInForm);","import React, { Component } from 'react';\r\nimport { TextField, withStyles, Button } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root, & .MuiButton-root': {\r\n            margin: theme.spacing(1),\r\n        },\r\n        '& .MuiTextField-root': {\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nclass SignUpForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            password2: '',\r\n            available: true,\r\n        };\r\n    }\r\n\r\n    onChange({ target: { name, value } }) {\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    async onSubmit(e) {\r\n        e.preventDefault();\r\n        const { username, password } = this.state;\r\n        const body = new URLSearchParams();\r\n        body.set('username', username);\r\n        body.set('password', password);\r\n        await fetch('/user', {\r\n            method: 'POST',\r\n            body,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { username, password, password2, available } = this.state;\r\n        const { classes } = this.props;\r\n        return (\r\n            <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={this.onSubmit.bind(this)}>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    label=\"Username\"\r\n                    error={!username || !available}\r\n                    value={username}\r\n                    onChange={this.onChange.bind(this)}\r\n                />\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    error={!password}\r\n                    value={password}\r\n                    onChange={this.onChange.bind(this)}\r\n                />\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    type=\"password\"\r\n                    name=\"password2\"\r\n                    label=\"Repeat Password\"\r\n                    error={password !== password2}\r\n                    value={password2}\r\n                    onChange={this.onChange.bind(this)}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    type=\"submit\"\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                >Sign Up</Button>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, { username: prevUsername }) {\r\n        const { username } = this.state;\r\n        if (username && username !== prevUsername) {\r\n            const { status } = await fetch(`/user/${username}`, { method: 'HEAD' });\r\n            this.setState({ available: status === 404 });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default withStyles(styles)(SignUpForm);","export const TODO_REPLACE_LIST = 'TODO_REPLACE_LIST';\r\nexport const TODO_SET_LOADING = 'TODO_SET_LOADING';\r\nexport const TODO_SET_ERROR = 'TODO_SET_ERROR';\r\n\r\nexport function todoSetLoading() {\r\n    return {\r\n        type: TODO_SET_LOADING,\r\n    };\r\n}\r\n\r\nexport function todoReplaceList(list) {\r\n    return {\r\n        type: TODO_REPLACE_LIST,\r\n        payload: list,\r\n    };\r\n}\r\n\r\nexport function todoSetError(error) {\r\n    return {\r\n        type: TODO_SET_ERROR,\r\n        payload: error,\r\n    };\r\n}\r\n\r\nexport function todoAddAsync(who, what, when) {\r\n    return sendJsonRequestAsync(201, 'POST', '/todo', { who, what, when });\r\n}\r\n\r\nexport function todoDoneAsync(id, done) {\r\n    return sendJsonRequestAsync(200, 'PATCH', `/todo/${id}`, { done });\r\n}\r\n\r\nexport function todoDeleteAsync(id) {\r\n    return modifyListAsync(204, `/todo/${id}`, { method: 'DELETE' });\r\n}\r\n\r\nexport function todoUpdateListAsync() {\r\n    return async function (dispatch) {\r\n        dispatch(todoSetLoading());\r\n        const response = await fetch('/todo/all');\r\n        if (response.status === 200) {\r\n            dispatch(todoReplaceList(await response.json()));\r\n        } else {\r\n            dispatch(todoSetError({ message: response.statusText }));\r\n        }\r\n    };\r\n}\r\n\r\nfunction sendJsonRequestAsync(expectedStatus, method, url, body) {\r\n    return modifyListAsync(expectedStatus, url, {\r\n        method,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(body),\r\n    });\r\n}\r\n\r\nfunction modifyListAsync(expectedStatus, url, fetchOptions) {\r\n    return async function (dispatch) {\r\n        dispatch(todoSetLoading());\r\n        const response = await fetch(url, fetchOptions);\r\n        if (response.status === expectedStatus) {\r\n            dispatch(todoUpdateListAsync());\r\n        }\r\n        else {\r\n            dispatch(todoSetError({ message: response.statusText }));\r\n        }\r\n    };\r\n}\r\n\r\n","import DateFnsUtils from '@date-io/date-fns'; // choose your lib\r\nimport { Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { DateTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { todoAddAsync } from '../actions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n}));\r\n\r\nexport default connect(\r\n    null, // map state to props\r\n    function (dispatch) { // map dispatch to props\r\n        return {\r\n            submit: ({ what, when }) => what && when && dispatch(todoAddAsync(who(), what, when)),\r\n        };\r\n    },\r\n)(function ({ submit }) {\r\n\r\n    const [what, setWhat] = useState('');\r\n    const onChangeWhat = function ({ target: { value } }) {\r\n        return setWhat(value);\r\n    };\r\n\r\n    const [when, setWhen] = useState(new Date());\r\n\r\n    const onSubmit = function (event) {\r\n        event.preventDefault();\r\n        submit({ what, when });\r\n        setWhat('');\r\n        setWhen(new Date());\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={onSubmit}>\r\n                <TextField variant=\"outlined\" label=\"What\" value={what} onChange={onChangeWhat} />\r\n                <DateTimePicker inputVariant=\"outlined\" value={when} onChange={setWhen} />\r\n                <Button variant=\"contained\" type=\"submit\" color=\"primary\" size=\"large\">Add</Button>\r\n            </form>\r\n        </MuiPickersUtilsProvider>\r\n    );\r\n});\r\n\r\nfunction who() {\r\n    return 'ron';\r\n}\r\n\r\n","import { Button } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport 'fontsource-roboto';\r\nimport React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { todoDeleteAsync, todoDoneAsync, todoUpdateListAsync } from '../actions';\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\nexport default connect(\r\n    ({ todo }) => ({ todo }),\r\n    dispatch => ({\r\n        updateList: () => dispatch(todoUpdateListAsync()),\r\n        doneItem: (id, done) => dispatch(todoDoneAsync(id, done)),\r\n        deleteItem: (id) => dispatch(todoDeleteAsync(id)),\r\n    }),\r\n)(function ({ todo, updateList, doneItem, deleteItem }) {\r\n\r\n    useEffect(function () {\r\n        updateList();\r\n    }, [updateList]);\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>What</TableCell>\r\n                        <TableCell align=\"right\">When</TableCell>\r\n                        <TableCell align=\"right\">Done</TableCell>\r\n                        <TableCell align=\"right\">Delete</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {todo.list.map(({ id, what, when, done, error }) => (\r\n                        <TableRow key={id} style={{ backgroundColor: error ? 'lightcoral' : done ? 'palegreen' : 'white' }}>\r\n                            <TableCell component=\"th\" scope=\"row\" style={{ textDecoration: done ? 'line-through' : 'none' }}>\r\n                                {what}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{when.toString()}</TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <Button variant=\"contained\" onClick={() => doneItem(id, !done)}>Done</Button>\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <Button variant=\"contained\" onClick={() => deleteItem(id)}>Delete</Button>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n});\r\n","import _ from 'lodash';\r\nimport { combineReducers } from 'redux';\r\nimport { TODO_REPLACE_LIST, TODO_SET_ERROR, TODO_SET_LOADING } from '../actions';\r\n\r\nfunction todo(state = { list: [], loading: true, error: false }, { type, payload }) {\r\n    switch (type) {\r\n        case TODO_SET_LOADING:\r\n            return { ...state, loading: true, error: false };\r\n        case TODO_REPLACE_LIST:\r\n            return { list: payload, loading: false, error: false };\r\n        case TODO_SET_ERROR:\r\n            return _.set({ ...state, loading: false, error: true }, `list[${payload.id}].error`, true);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({ todo });","import './App.css';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport SignInForm from './components/SignInForm';\nimport SignUpForm from './components/SignUpForm';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\nimport configureStore from './utils';\nimport { Typography } from '@material-ui/core';\n\nconst store = configureStore();\n\nfunction App() {\n\n  async function onClickLogOut(e) {\n    await fetch('/logout', { method: 'POST' });\n  }\n\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <div>\n            <Typography>\n              <Link to=\"#\" onClick={onClickLogOut}>Log Out</Link>\n            </Typography>\n          </div>\n          <h1>To Do List</h1>\n          <Switch>\n            <Route path=\"/signin\">\n              <SignInForm />\n            </Route>\n            <Route path=\"/signup\">\n              <SignUpForm />\n            </Route>\n            <Route path=\"/\">\n              <TodoForm />\n              <TodoList />\n            </Route>\n          </Switch>\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunkMiddleware from 'redux-thunk';\r\n// import monitorReducersEnhancer from './enhancers/monitorReducers';\r\n// import loggerMiddleware from './middleware/logger';\r\nimport rootReducer from '../reducers';\r\n\r\nexport default function configureStore(preloadedState) {\r\n    const middlewares = [/* loggerMiddleware, */ thunkMiddleware,];\r\n    const middlewareEnhancer = applyMiddleware(...middlewares);\r\n\r\n    const enhancers = [middlewareEnhancer, /* monitorReducersEnhancer */];\r\n    const composedEnhancers = composeWithDevTools(...enhancers);\r\n\r\n    const store = createStore(rootReducer, /* preloadedState, */ composedEnhancers);\r\n\r\n    return store;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}